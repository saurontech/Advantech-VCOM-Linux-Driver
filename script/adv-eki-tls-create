#!/bin/bash

ROOTCA_PATH=/usr/local/advtty
ROOTCA_NAME=rootCA
ROOTCA_PUB="$ROOTCA_PATH/$ROOTCA_NAME.pem"
ROOTCA_PRIV="$ROOTCA_PATH/$ROOTCA_NAME.key"
ROOTCA_SERIAL="$ROOTCA_PATH/$ROOTCA_NAME.srl"
EKI=
PASSPHRASE=
DH_LEN=1024
CERT_DAYS=1024
CSR_EC=
SANS=()
PKS=

usage()
{
cat << EOF
usage $0 options

This script creates the PEM key-pair and diffi-hellman needed by the EKI device server to operate TLS mode

OPTIONS:
	-h	Show this message
	-n	PEM output file name(without sub filename)
	-k	RootCA private key(default:$ROOTCA_PRIV)
	-p	RootCA public key(default:$ROOTCA_PUB)
	-s	RootCA serial(default:$ROOTCA_SERIAL)
	-e	Encyption Pass-Phrase(Password) for the PEM output
	-d	Certification validation period(in days; default:$CERT_DAYS)
	-L	DH length(default:$DH_LEN)
	-N	add SAN for HTTPS
	-P	export PKCS12 file

EXAMPLE:
	$0 -n EKI1
	$0 -n EKI1 -k ./rootCA.key -p ./rootCA.pem -s ./rootCA.srl
	$0 -n EKI1 -N 10.0.0.1 -N 10.0.0.2

EOF
}

create_conf()
{
CONFIG_FILE="${EKI}_config.config"
EXT_FILE="${EKI}_ext.ext"

cat << EOF > ${CONFIG_FILE}
[ req ]
distinguished_name = req_distinguished_name
req_extensions     = req_ext
prompt             = yes

[ req_distinguished_name ]
C  = Country
C_default = US
ST = State or Province
ST_default = NY
L  = Location
L_default = none
O  = Organization
O_default = advantech
OU = 
OU_default = RD
CN = Common Name
CN_default = none


[ req_ext ]
subjectAltName = @alt_names

[ alt_names ]
EOF
_COUNT=1
for _SAN in "${SANS[@]}"
do
	echo "IP.${_COUNT} = ${_SAN}" >> ${CONFIG_FILE}
	((_COUNT++))
done

cat << EOF > ${EXT_FILE}
authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
extendedKeyUsage = serverAuth
subjectAltName = @alt_names

[ alt_names ]
EOF

_COUNT=1
for _SAN in "${SANS[@]}"
do
	echo "IP.${_COUNT} = ${_SAN}" >> ${EXT_FILE}
	((_COUNT++))
done

}

createkey()
{

DH_FILENAME="${EKI}_dh${DH_LEN}.pem"
PUB_KEY="${EKI}_cert.pem"
UNSIGNED_PUB="${EKI}_pub.pem"
PRIV_KEY_NOPASS="${EKI}_nopass.key"
PRIV_KEY="$EKI.key"
CSR="$EKI.csr"
DSA="${EKI}dsa.pem"
KEYPAIR="$EKI.pem"
CONFIG_FILE="${EKI}_config.config"
EXT_FILE="${EKI}_ext.ext"

#check for rootCA files
echo "checking for rootCA files:"
if [ -f "$ROOTCA_PUB" ]
then
	echo "public key $ROOTCA_PUB found."
else
	echo "$ROOTCA_PUB not found."
	exit 1
fi

if [ -f "$ROOTCA_PRIV" ]
then
	echo "private key $ROOTCA_PRIV found."
else
	echo "$ROOTCA_PRIV not found."
	exit 1
fi

if [ -f "$ROOTCA_SERIAL" ]
then
	echo "serial $ROOTCA_SERIAL found."
else
	echo "$ROOTCA_SERIAL not found."
	exit 1
fi

#create DH
$(openssl dhparam -out $DH_FILENAME $DH_LEN)

#create private key
$(openssl ecparam -name prime256v1 -out s_prime256v1.pem)
if [[ -z "$PASSPHRASE" ]]
then
$(openssl ecparam -in s_prime256v1.pem -genkey -noout -out $PRIV_KEY)
else
#echo "passphrase = $PASSPHRASE."
$(openssl ecparam -in s_prime256v1.pem -genkey |openssl ec -passout pass:"$PASSPHRASE" -out $PRIV_KEY -aes256)
fi

#create CSR
$(openssl ecparam -name prime256v1 -genkey -out servercsr.pem)
if [ ${#SANS[@]} -eq 0 ]
then
$(openssl req -new -key servercsr.pem -out $CSR)
else
$(openssl req -new -key servercsr.pem -out $CSR -config $CONFIG_FILE)
fi

#create unsigned pub key
$(openssl ec -in $PRIV_KEY -passin pass:"$PASSPHRASE" -pubout -out $UNSIGNED_PUB)
#sign public key
if [ ${#SANS[@]} -eq 0 ]
then
$(openssl x509 -req -days $CERT_DAYS -in $CSR -CAkey $ROOTCA_PRIV -CA $ROOTCA_PUB -force_pubkey $UNSIGNED_PUB -out $PUB_KEY -CAserial $ROOTCA_SERIAL)
else
$(openssl x509 -req -days $CERT_DAYS -in $CSR -CAkey $ROOTCA_PRIV -CA $ROOTCA_PUB -force_pubkey $UNSIGNED_PUB -out $PUB_KEY -CAserial $ROOTCA_SERIAL -extfile $EXT_FILE)
fi

#create key pair
$(cat $PUB_KEY  $PRIV_KEY> $KEYPAIR)
}

while getopts “hn:k:p:s:e:L:d:N:P” OPTION
do
	case $OPTION in
		h)
			usage
			exit 1
			;;
		k)
			ROOTCA_PRIV=$OPTARG
			;;
		p)
			ROOTCA_PUB=$OPTARG
			;;
		s)
			ROOTCA_SERIAL=$OPTARG
			;;
		n)
			EKI=$OPTARG
			;;
		e)
			PASSPHRASE=$OPTARG
			;;
		d)
			CERT_DAYS=$OPTARG
			;;
		L)
			DH_LEN=$OPTARG
			;;
		N)
			SANS+=($OPTARG)
			;;
		P)
			PKS="enable"
			;;
		?)
			;;	
			
	esac
done

if [[ -z $EKI ]]
then
	usage
	exit 1
fi

if ((${#SANS[@]})); then
	create_conf
fi

createkey

if [[ -n $PKS ]]
then
echo ""
echo "----------------- creating PKCS12 -----------------"
$(openssl pkcs12 -export -inkey ${EKI}.pem -in ${EKI}.pem -out ${EKI}.p12)
fi

echo ""
echo "---"
echo "Copy the following files to the corresponding EKI device server"
echo ""
echo "* key-pair(pub/priv): $KEYPAIR "
echo "* diffi-hellman: $DH_FILENAME"
echo "* rootCA: $ROOTCA_PUB"
echo ""

